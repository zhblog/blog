<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<title>无标题文档</title>
<link href="wu.css" rel="stylesheet" type="text/css">
</head>

<body>
<h2>信号</h2>
<h3>一. 信号简介</h3>
<p>在有些情况下，我们不希望自己的shell脚本在运行时刻被中断，比如说我们写得shell脚
  本设为某一用户的默认shell，使这一用户进入系统后只能作某一项工作，如数据库备份， 我们可不希望用户使用ctrl+C之类便进入到shell状态，做我们不希望做的事情。这便用到了信号.<br>
处理。</p>
<h3>二. 列出信号</h3>
<p>kill -l可以列出系统的信号名称，如下：</p>
<p>  #kill -l </p>
<p>也可以使用下面的命令:</p>
<p>#man signal </p>
<p>  1) SIGHUP 2) SIGINT 3) SIGQUIT 4) SIGILL<br>
  5) SIGTRAP 6) SIGABRT 7) SIGBUS 8) SIGFPE<br>
  9) SIGKILL 10) SIGUSR1 11) SIGSEGV 12) SIGUSR2<br>
  13) SIGPIPE 14) SIGALRM 15) SIGTERM 17) SIGCHLD<br>
  18) SIGCONT 19) SIGSTOP 20) SIGTSTP 21) SIGTTIN<br>
  22) SIGTTOU 23) SIGURG 24) SIGXCPU 25) SIGXFSZ<br>
  26) SIGVTALRM 27) SIGPROF 28) SIGWINCH 29) SIGIO<br>
  30) SIGPWR 31) SIGSYS 34) SIGRTMIN 35) SIGRTMIN+1<br>
  36) SIGRTMIN+2 37) SIGRTMIN+3 38) SIGRTMIN+4 39) SIGRTMIN+5<br>
  40) SIGRTMIN+6 41) SIGRTMIN+7 42) SIGRTMIN+8 43) SIGRTMIN+9<br>
  44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+13<br>
  48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13<br>
  52) SIGRTMAX-12 53) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9<br>
  56) SIGRTMAX-8 57) SIGRTMAX-7 58) SIGRTMAX-6 59) SIGRTMAX-5<br>
  60) SIGRTMAX-4 61) SIGRTMAX-3 62) SIGRTMAX-2 63) SIGRTMAX-1<br>
  64) SIGRTMAX </p>
<h3>三. 发送信号</h3>
<p>语法: kill <em>-signal pid</em></p>
<p>signal可以是要发送的信号的整数,与可以是信号的名称.</p>
<p>pid是信号要发送的进程PID，如：</p>
<p>kill -s SIGTERM pid &nbsp;&nbsp;#同killl pid </p>
<p>向进程号为1001的进程发送1号信号</p>
<p>kill -1 1001 </p>
<p>向进程号为1001的进程发送SIGQUIT信号</p>
<p>kill -s SIGQUIT 1001 </p>
<h3>四. 信号处理</h3>
<p>(一). trap捕捉到信号之后，可以有三种反应方式：
</p>
<p>　　1. 执行一段程序来处理这一信号</p>
<p>　　2. 接受信号的默认操作</p>
<p>　　3. 忽视这一信号</p>
<p>(二). trap对上面三种方式提供了三种基本形式：</p>
<p>　　第一种形式的trap命令在shell接收到signal list清单中数值相同的信号时，将执行双</p>
<p>　　引号中的命令串。</p>
<p>　　trap 'commands' signal-list</p>
<p>　　trap &quot;commands&quot; signal-list</p>
<p>　　为了恢复信号的默认操作，使用第二种形式的trap命令：</p>
<p>　　trap signal-list</p>
<p>　　第三种形式的trap命令允许忽视信号</p>
<p>　　trap &quot; &quot; signal-list</p>
<p>　　注意：</p>
<p>　　1. 对信号11(段违例)不能捕捉，因为shell本身需要捕捉该信号去进行内存的转储。</p>
<p>　　2. 在trap中可以定义对信号0的处理(实际上没有这个信号)， shell程序在其终止(如</p>
<p>　　执行exit语句)时发出该信号。</p>
<p>　　3. 在捕捉到signal-list中指定的信号并执行完相应的命令之后， 如果这些命令没有</p>
<p>　　将shell程序终止的话，shell程序将继续执行收到信号时所执行的命令后面的命令，这样将</p>
<p>　　很容易导致shell程序无法终止。</p>
<p>　　另外，在trap语句中，单引号和双引号是不同的，当shell程序第一次碰到trap语句时，</p>
<p>　　将把commands中的命令扫描一遍。此时若commands是用单引号括起来的话，那么shell不会</p>
<p>　　对commands中的变量和命令进行替换， 否则commands中的变量和命令将用当时具体的值来</p>
<h3>例9-1 信号的三种处理方式</h3>
<p>在信号1(挂起),信号2(中断),信号15(软件中止)中任何一个到达时,删除所有临时文件,然后退出.</p>
<p>1. #trap 'rm tmp*;exit 1' 0 1 2 15 #或trap 'rm tmp*;exit 1' EXIT HUP INT TERM </p>
<p>将信号2重置为按缺省方式处理</p>
<p>2. #trap 2 #或trap INT </p>
<p>忽略信号1,信号2</p>
<p>3. #trap &quot;
  &quot;
1 2 #或trap &quot;&quot; HUP INT </p>
<p>列出中断信号与键盘的对应</p>
<p>4. stty -a</p>
<h3>例9-2 禁止用户按下退出键退出程序</h3>
<p>trap 'echo &quot;control-C will not terminate $0.&quot;' INT<br>
trap 'echo &quot;control-\ will not terminate $0.&quot;' QUIT <br>
trap 'echo &quot;control-Z will not terminate $0.&quot;' TSTP </p>
<p>echo &quot;enter any string after the prompt,when you are ready to exit ,type \&quot;stop\&quot;. &quot;</p>
<p>while :<br>
do<br>
&nbsp;&nbsp;echo -n &quot;Go ahead ...&gt;&quot;<br>
&nbsp;&nbsp;read<br>
&nbsp;&nbsp;if [[ $REPLY == [Ss]top ]] ;then<br>
&nbsp;&nbsp;&nbsp;&nbsp;break<br>
&nbsp;&nbsp;fi<br>
  done </p>
<h3>例9-3 在函数中捕捉信号</h3>
<p>function trapper() {<br>
&nbsp;&nbsp;echo &quot;In trapper&quot;<br>
&nbsp;&nbsp;trap 'echo &quot;Caught in a trap&quot;' INT<br>
}</p>
<p>while :<br>
  do<br>
&nbsp;&nbsp;echo &quot;In the main script&quot;<br>
&nbsp;&nbsp;trapper<br>
&nbsp;&nbsp;echo &quot;Still in main&quot;<br>
&nbsp;&nbsp;sleep 5 <br>
  done </p>
<h3>例9-4 退出时,删除临时文件夹 </h3>
<p>当脚本接收到信号SIGHUP,SIGINT,SIGQUIT,SIGTERM,临时文件夹就会被删除,并且调用exit以返回值2退出.</p>
<p>cleanup() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;if [ -f &quot;$OUTFILE&quot; ] ;then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf &quot;Cleaning up_&quot;;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rm -f &quot;$OUTFILE&quot; 2&gt; /dev/null ;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo &quot;Done&quot;;<br>
&nbsp;&nbsp;&nbsp;&nbsp;fi<br>
}<br>
<br>
trap cleanup 1 2 3 15
</p>
<h3>例9-5 定时器脚本</h3>
<p>#!/bin/bash</p>
<p>AlarmHandler() {<br>
  echo &quot;Got SIGALARM,cmd took too long.&quot;<br>
  KillSubProcs<br>
  exit 14<br>
  }</p>
<p>KillSubProcs() {<br>
  kill ${CHPROCIDS:-$!}<br>
  if [ $? -eq 0 ] ;then<br>
  echo &quot;Sub-processes killed&quot;;<br>
  fi<br>
  }</p>
<p>SetTimer() {<br>
  DEF_TOUT=${1:-10};<br>
  if [ $DEF_TOUT -ne 0 ] ;then<br>
  sleep $DEF_TOUT &amp;&amp; kill -s 14 $$ &amp;<br>
  CHPROCIDS=$!<br>
  TIMERPROC=$!<br>
  fi<br>
  }</p>
<p>UnsetTimer() {<br>
  kill $TIMERPROC<br>
  }</p>
<p>#main</p>
<p>trap AlarmHandler 14<br>
  PROG=$1<br>
  SetTimer 15<br>
  $PROG &gt; /dev/null 2&gt;&amp;1 &amp;<br>
  CHPROCIDS=$!<br>
  wait $!<br>
  UnsetTimer<br>
  echo &quot;ALL Done.&quot;<br>
  exit 0 </p>
<hr>
<p>执行上述脚本可能有两种情况:一是指定要执行的程序很快结束,另一种是指定要执行的程序耗时较长,超过15秒钟,由定时器结束.如:</p>
<p>1) #./aaa &quot;date&quot; #date的执行需时很短,结果显示&quot;ALL Done.&quot; </p>
<p>2) #./aaa &quot;find / -name jjjj &quot; #find的执行需时很长,在经过15秒后,程序结束,结果显示&quot;Sub-processes killed.&quot;</p>
<hr>
<h3>练习</h3>
<p>1. 为定时器脚本增加一个处理信号SIGINT的信号处理器,即当用户发出SIGINI信号时,显示相应的信息.</p>
</body>
</html>
