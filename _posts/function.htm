<html>

<head>
<meta http-equiv="Content-Language" content="zh-cn">
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<title>新建网页 1</title>
</head>

<body>

<h1>函数</h1>

<ul>
	<li>函数的定义</li>
	<li>执行函数</li>
	<li>函数参数</li>
	<li>全局变量、局部变量</li>
	<li>函数的链接，递归函数</li>
	<li>取消(清除)函数,导出函数</li>
</ul>
<p>函数在当前shell的环境中执行,也就是说,函数执行时并不派生一个子进程.</p>
<p>Bash shell先在别名中找,然后是函数,内置命令,最后才是可执行程序</p>
<h2>一. 函数的定义</h2>
<p>[function]<i> func_name</i>(){<br>
...<br>
}</p>
<h2>二. 执行函数</h2>
<p>通过函数名<i>func_name</i>来执行或调用函数</p>
<h2>三. 函数参数</h2>
<p>就象执行脚本时，可以附加参数一样，执行函数时也可以附加参数，并且也是通过$1、$2这样的形式访问的</p>
<h2>四. 全局变量、局部变量</h2>
<p>全局变量：有效范围是全局，即其值能在一个脚本的任何位置被访问。</p>
<p>局部变量：有效范围是局部，即其值只能在它被定义的函数（代码块）中使用,使用local或typeset来定义局部变量。</p>
<h2>五. 函数的链接，递归函数</h2>
<p>函数的链接：在一个函数中调用另一个函数。</p>
<p>递归函数：在函数中调用自己的函数。</p>
<h2>六. 清除函数,导出函数</h2>
<p>取消(清除)函数的定义，同删除变量一样，为:unset function_name</p>
<p>导出函数,为:export -f function_name</p>
<p>例 4-1：一个简单的带参函数</p>
<hr>
<p>#!/bin/bash</p>
<p>printMsg()</p>
<p>{<br>
echo &quot;$1:$2&quot;<br>
}</p>
<p>printMsg aaaa bbbb</p><hr>
<p>例 4-2: 函数链接(在一个函数中调用另一个函数)</p>
<hr>
<p>#!/bin/bash</p>
<p>orange (){<br>
echo &quot;Now in orange&quot;<br>
banana<br>
}</p>
<p>banana (){<br>
echo &quot;Now in banana&quot;<br>
}</p>
<p>orange</p>
<hr>
<p>例 4-3 : 全局变量</p>
<hr class="SpellE">
<p>#!/bin/bash</p>
<p>pearFunc () {<br>
pear=2<br>
echo &quot;In pearFunc():pear is $pear&quot;<br>
}</p>
<p>pearFunc<br>
echo &quot;Outside of pearFunc():pear is $pear&quot;</p>
<hr class="SpellE">
<p>例 4-4 : 全局变量</p>
<hr>
<p>#!/bin/bash</p>
<p>readPass () {<br>
pass=&quot;&quot;<br>
echo&nbsp; -n &quot;Enter password:&quot;<br>
stty -echo<br>
read pass<br>
stty echo<br>
echo<br>
}</p>
<p>readPass<br>
echo &quot;password is: $pass&quot;</p>
<hr class="SpellE">
<p>例 4-5 : 局部变量</p><hr>
<p>#!/bin/bash</p>
<p>pearFunc () {<br>
<b>typeset</b> pear=2 # <b>local</b> pear=2<br>
echo &quot;In pearFunc():pear is $pear&quot;<br>
}</p>
<p>pearFunc<br>
echo &quot;Outside of pearFunc():pear is $pear&quot;</p>
<hr class="SpellE">
<p>例 4-6 ：递归</p>
<hr>
<p>#!/bin/bash</p>
<p>reverse () {<br>
if [ $# -gt 0 ];then<br>
&nbsp;&nbsp;&nbsp; <b>typeset</b> arg=&quot;$1&quot;&nbsp; # <b>local</b> arg=&quot;$1&quot;<br>
&nbsp;&nbsp;&nbsp; shift<br>
&nbsp;&nbsp;&nbsp; reverse &quot;$@&quot;<br>
&nbsp;&nbsp;&nbsp; echo &quot;$arg&quot;<br>
fi<br>
}</p>
<p>reverse &quot;$@&quot;</p>
<hr>
<p>例 4-7 ：递归2,求阶乘</p>
<hr>
<p>#!/bin/bash<br>
MAX_ARG=5<br>
E_WRONG_ARGS=65<br>
E_RANGE_ERR=66<br>
if [ -z &quot;$1&quot; ];then<br>
echo &quot;Usage:`basename $0` number&quot;<br>
exit $E_WRONG_ARGS<br>
fi<br>
<br>
if [ &quot;$1&quot; -gt $MAX_ARG -o &quot;$1&quot; -lt &quot;0&quot; ];then<br>
echo &quot;Out of range (5 is maxmum).&quot;<br>
exit $E_RANGE_ERR<br>
fi<br>
<br>
function fact()<br>
{<br>
local number=$1<br>
if [ &quot;$1&quot; -eq &quot;0&quot; ];then<br>
r=1<br>
else<br>
let &quot;n=$number-1&quot;<br>
fact $n<br>
let &quot;r=$number * $?&quot;<br>
fi<br>
return $r<br>
}<br>
fact $1<br>
echo &quot;end of $1 is $?&quot;<br>
exit 0</p>
<hr>
<p>例 4-8 ：函数库应用</p>
<p>#!/bin/bash<br>
#. ~/tysp2/appendixD/libtysp2.sh<br>
source $HOME/tysp2/appendixD/libtysp2.sh<br>
promptYESNO &quot;If you want to call functions&quot; &quot;no&quot;<br>
if [[ $YESNO -eq &quot;y&quot; ]]; then<br>
&nbsp;&nbsp;&nbsp; echo Free Space of /var/www is `getSpaceFree &quot;/var/www&quot;`<br>
&nbsp;&nbsp;&nbsp; echo Space used in /var/www/htm `getSpaceUsed &quot;/var/www/html&quot;`<br>
&nbsp;&nbsp;&nbsp; promptRESPONSE &quot;please input prog name&quot; &quot;named&quot;<br>
&nbsp;&nbsp;&nbsp; if [ ! -z RESPONSE ] ;then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo $RESPONSE pid is `getPID 
$RESPONSE`<br>
&nbsp;&nbsp;&nbsp; fi<br>
else<br>
&nbsp;&nbsp;&nbsp; echo &quot;You dont want to do this&quot;<br>
fi</p>
<h2>练习</h2>
<p>1. 
写一个函数，判断一个命令是否存在于$PATH中指定的目录中。这个命令将作为第一个参数。如果存在的话，函数就输出命令的绝对路径并返回0。否则，函数返回1，并打印错误信息。</p>
<p>2. 增强本章中给出的readPass函数，使它能读两次密码，并能确认两次密码是一样的。</p>
<p>3. 编写函数,求一个整数的平方.整数从键盘输入,然后再调用函数.</p>
<p>4. 将前面循环中逐行处理文件的代码用函数包装起来,通过调用该函数的方式来逐行显示文件.</p>

</body>

</html>
